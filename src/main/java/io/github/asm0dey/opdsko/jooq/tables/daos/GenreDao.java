/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables.daos;


import io.github.asm0dey.opdsko.jooq.tables.Genre;
import io.github.asm0dey.opdsko.jooq.tables.records.GenreRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GenreDao extends DAOImpl<GenreRecord, io.github.asm0dey.opdsko.jooq.tables.pojos.Genre, Record2<Long, String>> {

    /**
     * Create a new GenreDao without any configuration
     */
    public GenreDao() {
        super(Genre.GENRE, io.github.asm0dey.opdsko.jooq.tables.pojos.Genre.class);
    }

    /**
     * Create a new GenreDao with an attached configuration
     */
    public GenreDao(Configuration configuration) {
        super(Genre.GENRE, io.github.asm0dey.opdsko.jooq.tables.pojos.Genre.class, configuration);
    }

    @Override
    public Record2<Long, String> getId(io.github.asm0dey.opdsko.jooq.tables.pojos.Genre object) {
        return compositeKeyRecord(object.getId(), object.getName());
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Genre> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Genre.GENRE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Genre> fetchById(Long... values) {
        return fetch(Genre.GENRE.ID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Genre> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Genre.GENRE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Genre> fetchByName(String... values) {
        return fetch(Genre.GENRE.NAME, values);
    }
}
